@using Microsoft.Extensions.Localization;
@inject IStringLocalizer<Elmah.Resx.UIStringResourcePerApp> localizer_UIStringResourcePerApp;
@inject IStringLocalizer<Framework.Resx.UIStringResource> localizer_UIStringResource;
@model Elmah.AspNetMvcCoreViewModel.MapVM
@{
    double latitue = 43.856100; double longitude = -79.337019;
}
<input id="pac-input" class="controls" type="text" placeholder="Search Box">
<div id="map_canvas" style="height: 600px;"></div>
@section scripts {
    <section class="scripts">
        <script type="text/javascript">
        // our code will go in here...
        $(document).ready(function() {
            Initialize();
        });
        function Initialize() {
            google.maps.visualRefresh = true;
            var Christchurch = new google.maps.LatLng(@latitue, @longitude);
        var mapOptions = {
            zoom: 14,
            center: Christchurch,
            mapTypeId: google.maps.MapTypeId.G_NORMAL_MAP
        };
        var map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);
            // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
            // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function () {
            searchBox.setBounds(map.getBounds());
            var bounds = map.getBounds();
            var northEastlat = bounds.getNorthEast().lat();
            var northEastlng = bounds.getNorthEast().lng();
            var southWestlat = bounds.getSouthWest().lat();
            var southWestlng = bounds.getSouthWest().lng();
            var center = bounds.getCenter().toJSON;
            var url = "/api/mapapi/getmapvm";
            try {
                if (bounds) {
                    var params = {
                        lat1: northEastlat,
                        lon1: northEastlng,
                        lat2: southWestlat,
                        lon2: southWestlng
                        };
                    $.getJSON(url, params, function (data) {
                        // Clear out the old markers.
                        markers.forEach(function (marker) {
                            marker.setMap(null);
                        });
                        markers = [];
                        $.each(data.result, function(i, item) {
                            var marker = new google.maps.Marker({
                                'position': new google.maps.LatLng(item.spatialLocation.latitude, item.spatialLocation.longitude),
                                'map': map,
                                'title': item.name
                            });
                            marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png');
                            markers.push(marker);
                            var infowindow = new google.maps.InfoWindow({
                                content: "<div class='googleMapInfoDiv'><h2>" +
                                    item.name +
                                    "</h2>" +
                                    "<div><h4>" + item.addressType +": " +
                                    item.address +
                                    "</h4></div></div>"
                            });
                            google.maps.event.addListener(marker,
                                'click',
                                function() {
                                    infowindow.open(map, marker);
                                });
                        });
                    });
                }
            }
            catch (e) {
            }
        });
        var markers = [];
            // Listen for the event fired when the user selects a prediction and retrieve
            // more details for that place.
        searchBox.addListener('places_changed', function () {
            var places = searchBox.getPlaces();
            if (places.length == 0) {
                return;
            }
            // For each place, get the icon, name and location.
            var bounds = new google.maps.LatLngBounds();
            places.forEach(function (place) {
                if (!place.geometry) {
                    console.log("Returned place contains no geometry");
                    return;
                }
                var icon = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25)
                };
                // Create a marker for each place.
                markers.push(new google.maps.Marker({
                    map: map,
                    icon: icon,
                    title: place.name,
                    position: place.geometry.location
                }));
                if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
            });
            map.fitBounds(bounds);
        });
    }
        </script>
    </section>
}
